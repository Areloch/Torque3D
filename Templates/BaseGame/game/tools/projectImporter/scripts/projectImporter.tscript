$ProjectImporter::rootDir = "tools";

function ProjectImporter::beginProjectImport()
{
   Canvas.pushDialog(ProjectImportCtrl);
}

function ProjectImportWindow::onWake(%this)
{
   %this.importStepNumber = 0;
   %this-->stepsList.clear();
   %this-->stepsList.addRow(0, "Welcome");  
   %this-->stepsList.addRow(1, "Previous Project Ver.");
   %this-->stepsList.addRow(2, "Locate Previous Project Content");
   %this-->stepsList.addRow(3, "Set New Module Name");
   %this-->stepsList.addRow(4, "Copy Old Files");
   %this-->stepsList.addRow(5, "Import");
   %this-->stepsList.addRow(6, "Done");
   
   %this.stepCount = %this-->stepsList.rowCount()-1;
   
   %this.showPage(0);
}

function ProjectImportWindow::previousStep(%this)
{
   if(%this.importStepNumber == 0)
      return;
      
   %this.importStepNumber--;
   
   %this.showPage(%this.importStepNumber);
}

function ProjectImportWindow::nextStep(%this)
{
   if(%this.importStepNumber == %this.stepCount)
   {
      Canvas.popDialog(ProjectImportCtrl);
      return;  
   }
   
   %this.importStepNumber++;
   
   %this.showPage(%this.importStepNumber);
}

function ProjectImportWindow::selectOGFolder(%this)
{
   %dlg = new OpenFolderDialog()
   {
      Title = "Select Export Folder";
      Filters = %filter;
      DefaultFile = "data/";
      ChangePath = false;
      MustExist = true;
      MultipleFiles = false;
   };

   //if(filePath( %currentFile ) !$= "")
      %dlg.DefaultPath = "data/";

   if(%dlg.Execute())
   {
      %path = makeFullPath(%dlg.FileName);
      %this-->targetImportingPath.setText("Folder: " @ %path);
      $ProjectImporter::sourceContentFolder = %path;
   }

   %dlg.delete();
}

function ProjectImportWindow::showPage(%this, %pageIndex)
{
   if(%pageIndex < 0 || %pageIndex > %this.stepCount)
      return;
      
   %this.importStepNumber = %pageIndex;
   %this-->stepsList.clearSelection();
   %this-->stepsList.setSelectedById(%this.importStepNumber);
   
   for(%i=0; %i < 6; %i++)
   {
      %pageHideCmd = %this @ "-->page" @ %i @ ".setHidden(true);";
      eval(%pageHideCmd);
   }
   
   %pageHideCmd = %this @ "-->page" @ %this.importStepNumber @ ".setHidden(false);";
   eval(%pageHideCmd);
   
   (ProjectImportWizardPage @ %pageIndex).openPage();
}

function ProjectImportWizardPage0::openPage(%this)
{
   ProjectImportWindow-->backButton.setHidden(true);
}

function ProjectImportWizardPage0::processPage(%this)
{
}

function ProjectImportWizardPage1::openPage(%this)
{
   ProjectImportWindow-->backButton.setHidden(false);
   
   %this-->previousContentVersionPopup.clear();
   %this-->previousContentVersionPopup.add("Torque Game Engine");
   %this-->previousContentVersionPopup.add("Torque Shader Engine");
   %this-->previousContentVersionPopup.add("Torque 3D Pre-4.0");
}

function ProjectImportWizardPage1::processPage(%this)
{
}

function ProjectImportWizardPage2::openPage(%this)
{
   
}

function ProjectImportWizardPage2::processPage(%this)
{
}

function ProjectImportWizardPage3::openPage(%this)
{
   %slashCount = getTokenCount($ProjectImporter::sourceContentFolder, "/");
   %topFolder = getToken($ProjectImporter::sourceContentFolder, "/", %slashCount-1);
   if(%topFolder $= "")
      %topFolder = getToken($ProjectImporter::sourceContentFolder, "/", %slashCount-2);
  
   $ProjectImporter::moduleName = %topFolder; //preseed the module name
   
   ProjectImportWizardPage3-->newModuleName.setText($ProjectImporter::moduleName);
}

function ProjectImportWizardPage3::processPage(%this)
{
}

function ProjectImportWizardPage4::openPage(%this)
{
   ProjectImportWindow-->backButton.setHidden(true);
   ProjectImportWindow-->nextButton.setActive(false);
   %version = ProjectImportWizardPage1-->previousContentVersionPopup.getSelected();
   
   Canvas.repaint(); //force it to refresh the page so we're up to date.
   
   switch$(%version)
   {
      case 0:
         $ProjectImporter::versionMode = "TGEProject";
      case 1:
         $ProjectImporter::versionMode = "TSEProject";
      case 2:
         $ProjectImporter::versionMode = "T3Dpre4Project";
      default:
         $ProjectImporter::versionMode = "T3Dpre4Project";
   }

   if(ProjectImportWizardPage2-->existingModuleBtn.isStateOn())
      $ProjectImporter::importMode = "ExistingModule";
   else if(ProjectImportWizardPage2-->existingFolderBtn.isStateOn())
      $ProjectImporter::importMode = "ExistingFolder";
   else if(ProjectImportWizardPage2-->externalFolderBtn.isStateOn())
      $ProjectImporter::importMode = "ExternalFolder";
      
   $ProjectImporter::moduleName = ProjectImportWizardPage3-->newModuleName.getText();
   
   $ProjectImporter::importTool = new ScriptObject($ProjectImporter::versionMode @ "Importer");
      
   $ProjectImporter::importTool.setupModule();
   
   $ProjectImporter::modulePath = "data/" @ $ProjectImporter::moduleName;
   
   $ProjectImporter::importTool.copyFiles();
}

function ProjectImportWizardPage4::processPage(%this)
{
}

function ProjectImportWizardPage5::openPage(%this)
{
   ProjectImportWindow-->nextButton.setActive(false);
   Canvas.repaint();
   
   $ProjectImporter::importTool.processImportedFiles();
}

function ProjectImportWizardPage5::processPage(%this)
{
}

function ProjectImportWizardPage6::openPage(%this)
{
}

function beginProjectImport()
{
   error("===========================================");
   error("Beginning Project Import");
   error("===========================================");
   
   $ProjectImporter::assetQuery = new AssetQuery();
   $ProjectImporter::importer = new AssetImporter();
   $ProjectImporter::persistMgr = new PersistenceManager();
   
   //beginMaterialImport();
   
   //beginTerrainMaterialImport();
   
   //beginShapeImport();
   
   beginImageImport();
   
   beginDatablockImport();
   
   beginGUIImport();
   
   beginTerrainImport();
   
   //postFX imports'll need to look up render target names and ensure assets for those exist
   //otherwise they need to be generated
   beginPostFXImport();
   
   beginMiscObjectImport();
   
   $ProjectImporter::assetQuery.delete();
   $ProjectImporter::importer.delete();
   $ProjectImporter::persistMgr.delete();
   
   error("===========================================");
   error("Finished Project Import");
   error("===========================================");
   
   AssetBrowser.refresh(); //update the AB just in case
}

function testFilenameExtensions(%filename)
{
   %ext = fileExt(%filename);  
   if(%ext !$= "")
      return %filename;
      
   if(isFile(%filename @ ".png"))
      return %filename @ ".png";
   else if(isFile(%filename @ ".jpg"))
      return %filename @ ".jpg";
   else if(isFile(%filename @ ".jpeg"))
      return %filename @ ".jpeg";
   else if(isFile(%filename @ ".dds"))
      return %filename @ ".dds";
   else if(isFile(%filename @ ".bmp"))
      return %filename @ ".bmp";
   else if(isFile(%filename @ ".cached.dts"))
      return %filename @ ".cached.dts";
   else if(isFile(%filename @ ".dts"))
      return %filename @ ".dts";
   else if(isFile(%filename @ ".dae"))
      return %filename @ ".dae";
   else if(isFile(%filename @ ".dds"))
      return %filename @ ".dds";
      
   return "";
}

function processLegacyField(%line, %originalFieldName, %newFieldName)
{
   if(!strIsMatchExpr("*"@%originalFieldName@"=*\"*\";", %line) && 
      !strIsMatchExpr("*"@%originalFieldName@"[*=*\"*\";", %line) &&
      !strIsMatchExpr("*"@%originalFieldName@" *=*\"*\";", %line))
      return %line;
      
   %outLine = strreplace(%line, %originalFieldName, %newFieldName);
   
   //get the value
   %value = "";
   %pos = strpos(%outLine, "= \"");
   if(%pos != -1)
   {
     %endPos = strpos(%outLine, "\";", %pos); 
     
     %value = getSubStr(%outLine, %pos+3, %endPos-%pos-3);
   }
   else
   {
      %pos = strpos(%outLine, "=\"");
      if(%pos != -1)
      {
        %endPos = strpos(%outLine, "\";", %pos); 
        
        %value = getSubStr(%outLine, %pos+2, %endPos-%pos-2);
      }
   }
   
   if(%outLine !$= %line && %pos != -1 && %endPos != -1 && %value !$= "")
   {
      echo("Legacy Project Importer - processing legacy field line: " @ %line);
      
      //find any assets with that filename
      if(startsWith(%value, "./"))
      {
         %targetFilename = strReplace(%value, "./", $ProjectImporter::currentFilePath @ "/");
      }
      else if(startsWith(%value, "../"))
      {
         %slashPos = strposr($ProjectImporter::currentFilePath, "/");
         if(%slashPos == strlen($ProjectImporter::currentFilePath)-1) //if it's right at the end, we'll get the next one up
         {
            %slashPos = strposr($ProjectImporter::currentFilePath, "/", 2);
         }
         
         %parentPath = getSubStr($ProjectImporter::currentFilePath, 0, %slashPos);
         %targetFilename = strReplace(%value, "../", %parentPath @ "/");
      }
      else if(startsWith(%value, "~"))
      {
         %targetFilename = strReplace(%value, "~", $ProjectImporter::modulePath @ "/");
      }
      else
      {
         %targetFilename = $ProjectImporter::modulePath @ "/" @ %value;
      }
      
      %targetFilename = strReplace(%targetFilename, "//", "/");
      %targetFilename = testFilenameExtensions(%targetFilename);
      
      if(!isFile(%targetFilename)) //if our presumed file target is bad, just bail out
      {
         error("Legacy Project Importer - file described in line could not be found/is not valid");
         return %line;
      }
      
      $ProjectImporter::assetQuery.clear();
      %foundAssets = AssetDatabase.findAssetLooseFile($ProjectImporter::assetQuery, %targetFilename);
      if(%foundAssets != 0)
      {
         %assetId = $ProjectImporter::assetQuery.getAsset(0);
         echo("Legacy Project Importer - processing of legacy field line's value: " @ %value @ " has found a matching AssetId: " @ %assetId);
      }
     
      if(%assetId !$= "")
         %outLine = strReplace(%outLine, %value, %assetId);
   }
   
   if(%outLine !$= %line)
   {
      echo("Legacy Project Importer - processing of legacy line: " @ %line @ " has been updated to: " @ %outLine);
      return %outLine;  
   }
   else
   {
      return %line;  
   }
}

function updateObjectLegacyField(%obj, %fieldName, %arrayIndex, %typeHint, %setObjDirty)
{
   %targetAssetField = %fieldName;
   
   if(%arrayIndex !$= "")
      %fieldName = %fieldName @ "[" @ %arrayIndex @ "]";
   
   %fieldFile = %obj.getFieldValue(%fieldName);
   if(%fieldFile !$= "")
   {
      %objName = %obj.getName();
      if(%objName $= "")
         %objName = %obj.getId();
         
      if(%setObjDirty $= "")
         %setObjDirty = true;
         
      if(!isFile(%fieldFile))
      {
         //probably have to do some work here. First we need to see if it has an extension:
         %ext = fileExt(%fieldFile);
         if(%ext $= "")
         {
            %fieldType = %obj.getFieldType(%fieldName);
            if(%fieldType $= "TypeImageFilename" || %fieldType $= "TypeFilename")
            {
               if(isFile(%fieldFile @ ".png"))
                  %fieldFile = %fieldFile @ ".png";
               else if(isFile(%fieldFile @ ".dds"))
                  %fieldFile = %fieldFile @ ".dds";
               else if(isFile(%fieldFile @ ".jpg"))
                  %fieldFile = %fieldFile @ ".jpg";
            }
            else if(%fieldType $= "TypeShapeFilename")
            {
               if(isFile(%fieldFile @ ".dts"))
                  %fieldFile = %fieldFile @ ".dts";
               else if(isFile(%fieldFile @ ".dae"))
                  %fieldFile = %fieldFile @ ".dae";
               else if(isFile(%fieldFile @ ".fbx"))
                  %fieldFile = %fieldFile @ ".fbx";
            }
         }
         
         %path = filePath(%fieldFile);
         if(%path $= "")
         {
            %path = filePath(%obj.getFilename());
            
            if(isFile(%path @ "/" @ %fieldFile))
               %fieldFile = %path @ "/" @ %fieldFile;
         }
         
         if(!isFile(%fieldFile))
         {
            error("Failed to process " @ %objName @ "'s field " @ %fieldName @ " with data: " @ %fieldFile @ ", does not appear to contain a valid file path");
            return "";
         }
      }
         
      warn(%objName @ " has " @ %fieldName @ " that contains the file: " @ %fieldFile);
      warn("Attempting to find existing asset for field file data");
      
      $ProjectImporter::assetQuery.clear();
         
      %assetsFound = AssetDatabase.findAssetLooseFile($ProjectImporter::assetQuery, %fieldFile);
      if(%assetsFound == 0)
      {
         warn("No associated asset found. Attempting to import file.");
         %assetId = $ProjectImporter::importer.autoImportFile(%fieldFile, %typeHint);  
         
         if(%assetId !$= "")
         {
            warn("File import successful, creating new asset: " @ %assetId);  
         }
         else
         {
            error("File import failed");  
         }
      }
      else
      {
         %assetId = $ProjectImporter::assetQuery.getAsset(0);
         warn("Associated asset found: " @ %assetId);
      }
         
      %fallbackAsset = "";
      %assetType = "";
      if(%obj.getFieldType(%fieldName) $= "TypeShapeFilename")
      {
         %fallbackAsset = "Core_Rendering::noShape";
         %assetType = "ShapeAsset";
      }
      else if(%obj.getFieldType(%fieldName) $= "TypeImageFilename")
      {
         %fallbackAsset = "Core_Rendering::noImage";
         %assetType = "ImageAsset";
      }
      else if(%obj.getFieldType(%fieldName) $= "TypeMaterialName")
      {
         %fallbackAsset = "Core_Rendering::noMaterial";
         %assetType = "MaterialAsset";
      }
      else if(%obj.getFieldType(%fieldName) $= "TypeSoundFilename")
      {
         %fallbackAsset = "Core_Rendering::noSound";
         %assetType = "SoundAsset";
      }
      
      if(%assetId !$= "" && %assetId !$= %fallbackAsset)
      {
         //Clear legacy field
         %clearCommand = %obj @ "." @ %fieldName @ " = \"\";";
         eval(%clearCommand);
         
         if(%arrayIndex $= "")
            %targetAssetField = %targetAssetField @ "Asset";
         else
            %targetAssetField = %targetAssetField @ "Asset[" @ %arrayIndex @ "]";
            
         %updateCommand = %obj @ "." @ %targetAssetField @ " = \"" @ %assetId @ "\";";
         eval(%updateCommand);
         echo(%objName @ ": New " @ %assetType @ " asset on " @ %targetAssetField @ " : " @ %assetId );
         
         if(%setObjDirty)
            $ProjectImporter::persistMgr.setDirty(%obj);
            
         return %assetId;
      }
      else
      {
         error("Failed to process " @ %assetType @ " for object " @ %objName @ " in field " @ %fieldName);
      }
   }
   
   return "";
}

function remapObjectLegacyField(%obj, %oldFieldName, %newfieldName, %arrayIndex, %typeHint, %setObjDirty)
{
   if(%arrayIndex !$= "")
      %oldFieldName = %oldFieldName @ "[" @ %arrayIndex @ "]";
   
   %fieldFile = %obj.getFieldValue(%oldFieldName);
   if(%fieldFile !$= "")
   {
      %objName = %obj.getName();
      if(%objName $= "")
         %objName = %obj.getId();
         
      if(%setObjDirty $= "")
         %setObjDirty = true;
         
      if(!isFile(%fieldFile))
      {
         //probably have to do some work here. First we need to see if it has an extension:
         %ext = fileExt(%fieldFile);
         if(%ext $= "")
         {
            %fieldType = %obj.getFieldType(%oldFieldName);
            if(%fieldType $= "TypeImageFilename" || %fieldType $= "TypeFilename")
            {
               if(isFile(%fieldFile @ ".png"))
                  %fieldFile = %fieldFile @ ".png";
               else if(isFile(%fieldFile @ ".dds"))
                  %fieldFile = %fieldFile @ ".dds";
               else if(isFile(%fieldFile @ ".jpg"))
                  %fieldFile = %fieldFile @ ".jpg";
            }
            else if(%fieldType $= "TypeShapeFilename")
            {
               if(isFile(%fieldFile @ ".dts"))
                  %fieldFile = %fieldFile @ ".dts";
               else if(isFile(%fieldFile @ ".dae"))
                  %fieldFile = %fieldFile @ ".dae";
               else if(isFile(%fieldFile @ ".fbx"))
                  %fieldFile = %fieldFile @ ".fbx";
            }
         }
         
         %path = filePath(%fieldFile);
         if(%path $= "")
         {
            %path = filePath(%obj.getFilename());
            
            if(isFile(%path @ "/" @ %fieldFile))
               %fieldFile = %path @ "/" @ %fieldFile;
         }
         
         if(!isFile(%fieldFile))
         {
            error("Failed to process " @ %objName @ "'s field " @ %oldFieldName @ " with data: " @ %fieldFile @ ", does not appear to contain a valid file path");
            return "";
         }
      }
         
      warn(%objName @ " has " @ %oldFieldName @ " that contains the file: " @ %fieldFile @ ", to be remapped to " @ %newfieldName);
      warn("Attempting to find existing asset for field file data");
      
      $ProjectImporter::assetQuery.clear();
         
      %assetsFound = AssetDatabase.findAssetLooseFile($ProjectImporter::assetQuery, %fieldFile);
      if(%assetsFound == 0)
      {
         warn("No associated asset found. Attempting to import file.");
         %assetId = $ProjectImporter::importer.autoImportFile(%fieldFile, %typeHint);  
         
         if(%assetId !$= "")
         {
            warn("File import successful, creating new asset: " @ %assetId);  
         }
         else
         {
            error("File import failed");  
         }
      }
      else
      {
         %assetId = $ProjectImporter::assetQuery.getAsset(0);
         warn("Associated asset found: " @ %assetId);
      }
         
      %fallbackAsset = "";
      %assetType = "";
      if(%obj.getFieldType(%oldFieldName) $= "TypeShapeFilename")
      {
         %fallbackAsset = "Core_Rendering::noShape";
         %assetType = "ShapeAsset";
      }
      else if(%obj.getFieldType(%oldFieldName) $= "TypeImageFilename")
      {
         %fallbackAsset = "Core_Rendering::noImage";
         %assetType = "ImageAsset";
      }
      else if(%obj.getFieldType(%oldFieldName) $= "TypeMaterialName")
      {
         %fallbackAsset = "Core_Rendering::noMaterial";
         %assetType = "MaterialAsset";
      }
      else if(%obj.getFieldType(%oldFieldName) $= "TypeSoundFilename")
      {
         %fallbackAsset = "Core_Rendering::noSound";
         %assetType = "SoundAsset";
      }
      
      if(%assetId !$= "" && %assetId !$= %fallbackAsset)
      {
         //Clear legacy field
         //%clearCommand = %obj @ "." @ %oldFieldName @ " = \"\";";
         //eval(%clearCommand);
         
         if(%arrayIndex $= "")
            %targetAssetField = %newfieldName @ "Asset";
         else
            %targetAssetField = %newfieldName @ "Asset[" @ %arrayIndex @ "]";
            
         %updateCommand = %obj @ "." @ %targetAssetField @ " = \"" @ %assetId @ "\";";
         eval(%updateCommand);
         echo(%objName @ ": New " @ %assetType @ " asset on " @ %targetAssetField @ " : " @ %assetId );
         
         if(%setObjDirty)
            $ProjectImporter::persistMgr.setDirty(%obj);
            
         return %assetId;
      }
      else
      {
         error("Failed to process " @ %assetType @ " for object " @ %objName @ " in field " @ %oldFieldName @ " to new field " @ %newfieldName);
      }
   }
   
   return "";
}

//==============================================================================
//Shape Importing
//==============================================================================
function beginShapeImport()
{
   error("===========================================");
   error("Importing 3D Shape files");
   error("===========================================");
   //First, we need to go through and process all loose shape files. This will
   //get us shape assets, material assets image, assets and animation assets.
   %currentAddress = $ProjectImporter::modulePath;
   
   //First, wipe out any files inside the folder first
   %file = findFirstFileMultiExpr( %currentAddress @ "/*.*", true);
   
   while( %file !$= "" )
   {      
      if(endsWith(%file, "cached.dts"))
      {
         %file = findNextFileMultiExpr( %currentAddress @ "/*.*" );
         continue;
      }
      
      %filename = fileName(%file);
      %fileExt = fileExt(%file);
      %filePath = filePath(%file);
      
      //Specific exclusions
      if(endsWith(%filename, "cached.dts"))
      {
         %file = findNextFileMultiExpr( %currentAddress @ "/*.*" );
         continue;
      }
         
      if(isShapeFormat(%fileExt))
      {
         %assetsFound = AssetDatabase.findAssetLooseFile($ProjectImporter::assetQuery, %file);
         if(%assetsFound == 0)
         {
            //No asset found associated to this fileas far as we can determine, so time to import it
            
            warn("Importing 3D Shape file: " @ %file);
            %assetId = $ProjectImporter::importer.autoImportFile(%file);  
            
            if(%assetId != "")
            {
               warn("Finished importing 3D Shape file, resulting in asset with an id of: " @ %assetId);
            }
         }
      }
      
      %file = findNextFileMultiExpr( %currentAddress @ "/*.*" );
   }
   
   error("===========================================");
   error("Finished Importing 3D Shape files");
   error("===========================================");
}
//==============================================================================

//==============================================================================
//Image Importing
//==============================================================================
function beginImageImport()
{
   error("===========================================");
   error("Importing Image files");
   error("===========================================");
   //First, we need to go through and process all loose image files. This will
   //get us image assets, and if the import config deigns, material assets.
   %currentAddress = $ProjectImporter::modulePath;
   
   //First, wipe out any files inside the folder first
   %file = findFirstFileMultiExpr( %currentAddress @ "/*.*", true);
   
   while( %file !$= "" )
   {      
      %filename = fileName(%file);
      %fileExt = fileExt(%file);
      %filePath = filePath(%file);
      
      if(isImageFormat(%fileExt))
      {
         %assetsFound = AssetDatabase.findAssetLooseFile($ProjectImporter::assetQuery, %file);
         if(%assetsFound == 0)
         {
            //No asset found associated to this fileas far as we can determine, so time to import it
            
            warn("Importing Image file: " @ %file);
            %assetId = $ProjectImporter::importer.autoImportFile(%file);  
            
            if(%assetId != "")
            {
               warn("Finished importing Image file, resulting in asset with an id of: " @ %assetId);
            }
         }
      }
      
      %file = findNextFileMultiExpr( %currentAddress @ "/*.*" );
   }
   
   error("===========================================");
   error("Finished Importing Image files");
   error("===========================================");
}
//==============================================================================

//==============================================================================
//Terrain Importing
//==============================================================================
function beginTerrainImport()
{
   error("===========================================");
   error("Importing Terrain files");
   error("===========================================");

   %currentAddress = $ProjectImporter::modulePath;
   
   //First, wipe out any files inside the folder first
   %file = findFirstFileMultiExpr( %currentAddress @ "/*.*", true);
   
   while( %file !$= "" )
   {      
      %fileName = fileName(%file);
      %fileExt = fileExt(%file);
      %filePath = filePath(%file);
      if(%fileExt $= ".ter")
      {
         %assetsFound = AssetDatabase.findAssetLooseFile($ProjectImporter::assetQuery, %file);
         if(%assetsFound == 0)
         {
            warn("Importing Terrain file: " @ %file);
            
            %moduleName = AssetBrowser.dirHandler.getModuleFromAddress(%file);
            %modulePath = $ProjectImporter::modulePath @ "/" @ %moduleName;
               
            //test import config here for forcing type suffixes
            %assetName = fileBase(%file);
            
            %assetPath = %filePath @ "/";
            
            %tamlpath = %assetPath @ %assetName @ ".asset.taml";
            
            %asset = new TerrainAsset()
            {
               AssetName = %assetName;
               versionId = 1;
               terrainFile = %fileName;
            };
            
            if(TamlWrite(%asset, %tamlpath))
            {
               %moduleDef = ModuleDatabase.findModule(%moduleName, 1);
               AssetDatabase.addDeclaredAsset(%moduleDef, %tamlpath);
               
               warn("Finished importing Terrain file, resulting in asset with an id of: " @ %moduleDef @ ":" @ %assetName);
            }
         }
      }
      
      %file = findNextFileMultiExpr( %currentAddress @ "/*.*" );
   }
   
   error("===========================================");
   error("Finished Importing 3D Shape files");
   error("===========================================");
}
//==============================================================================

//==============================================================================
//Sound Importing
//==============================================================================

//==============================================================================

//==============================================================================
//Material Importing
//==============================================================================
function beginMaterialImport()
{
   error("===========================================");
   error("Importing Materials");
   error("===========================================");

   foreach( %mat in MaterialSet )
   {
      %id = %mat.getId();
      
      %matName = %mat.getName();
      %matFile = %mat.getFilename();
      
      if(%matFile $= "" || !startsWith(%matFile, $ProjectImporter::modulePath))
         continue;
      
      %result = MaterialAsset::getAssetIdByMaterialName(%matName);
      if(%result !$= "" && %result !$= "Core_Rendering:noMaterial")
         continue; //don't re-process if we've already got an asset for it
      
      warn("Updating Material " @ %matName @ " to use assets instead of legacy fields");
      
      %maxLayers = 4;
      
      for(%i = 0; %i < %maxLayers; %i++)
      {
         //Process through the material now
         %imageAssetId = updateObjectLegacyField(%mat, "diffuseMap", %i);
         
         %imageAssetId = updateObjectLegacyField(%mat, "normalMap", %i);
         
         %imageAssetId = updateObjectLegacyField(%mat, "ORMConfigMap", %i);
         
         %imageAssetId = updateObjectLegacyField(%mat, "OverlayMap", %i);
         
         %imageAssetId = updateObjectLegacyField(%mat, "LightMap", %i);
         
         %imageAssetId = updateObjectLegacyField(%mat, "ToneMap", %i);

         %imageAssetId = updateObjectLegacyField(%mat, "DetailMap", %i);
         
         %imageAssetId = updateObjectLegacyField(%mat, "RoughMap", %i);
         
         %imageAssetId = updateObjectLegacyField(%mat, "AOMap", %i);

         %imageAssetId = updateObjectLegacyField(%mat, "MetalMap", %i);
         
         %imageAssetId = updateObjectLegacyField(%mat, "GlowMap", %i);
         
         %imageAssetId = updateObjectLegacyField(%mat, "DetailNormalMap", %i);
      }
      
      processMaterialIntoAsset(%matName, %matFile);
   }
   
   $ProjectImporter::persistMgr.saveDirty();

   error("===========================================");
   error("Finished Importing Materials");
   error("===========================================");
}

function processMaterialIntoAsset(%matName, %file)
{
   %filePath = filePath(%file);
   %moduleName = AssetBrowser.dirHandler.getModuleFromAddress(%file).ModuleId;
   %modulePath = $ProjectImporter::modulePath @ "/" @ %moduleName;
      
   //test import config here for forcing type suffixes
   %assetName = %matName @ "_mat";
   
   %assetPath = %filePath @ "/";
   
   %tamlpath = %assetPath @ %assetName @ ".asset.taml";
   %fileName = fileName(%file);
   
   %asset = new MaterialAsset()
   {
      AssetName = %assetName;
      versionId = 1;
      scriptFile = %fileName;
      materialDefinitionName = %matName;
   };
   
   TamlWrite(%asset, %tamlpath);
	
	%moduleDef = ModuleDatabase.findModule(%moduleName, 1);
	AssetDatabase.addDeclaredAsset(%moduleDef, %tamlpath);
	
	return %tamlpath;    
}
//==============================================================================

//==============================================================================
//TerrainMaterial Importing
//==============================================================================
function beginTerrainMaterialImport()
{
   error("===========================================");
   error("Importing Terrain Materials");
   error("===========================================");

   foreach( %mat in TerrainMaterialSet )
   {
      %id = %mat.getId();
      
      %matName = %mat.getName();
      %matFile = %mat.getFilename();
      
      if(%matFile $= "" || !startsWith(%matFile, $ProjectImporter::modulePath))
         continue;
      
      %result = TerrainMaterialAsset::getAssetIdByMaterialName(%matName);
      if(%result !$= "" && %result !$= "Core_Rendering:noMaterial")
         continue; //don't re-process if we've already got an asset for it
      
      warn("Updating Terrain Material " @ %matName @ " to use assets instead of legacy fields");
      
      %maxLayers = 4;
      
      for(%i = 0; %i < %maxLayers; %i++)
      {
         //Process through the material now
         %imageAssetId = updateObjectLegacyField(%mat, "diffuseMap");
         
         %imageAssetId = updateObjectLegacyField(%mat, "normalMap");
         
         %imageAssetId = updateObjectLegacyField(%mat, "ORMConfigMap");
         
         %imageAssetId = updateObjectLegacyField(%mat, "detailMap");
         
         %imageAssetId = updateObjectLegacyField(%mat, "macroMap");
      }
      
      processTerrainMaterialIntoAsset(%matName, %matFile);
   }
   
   $ProjectImporter::persistMgr.saveDirty();

   error("===========================================");
   error("Finished Importing Terrain Materials");
   error("===========================================");
}

function processTerrainMaterialIntoAsset(%matName, %file)
{
   %filePath = filePath(%file);
   %moduleName = AssetBrowser.dirHandler.getModuleFromAddress(%file).ModuleId;
   %modulePath = $ProjectImporter::modulePath @ "/" @ %moduleName;
      
   //test import config here for forcing type suffixes
   %assetName = %matName @ "_mat";
   
   %assetPath = %filePath @ "/";
   
   %tamlpath = %assetPath @ %assetName @ ".asset.taml";
   %fileName = fileName(%file);
   
   %asset = new TerrainMaterialAsset()
   {
      AssetName = %assetName;
      versionId = 1;
      scriptFile = %fileName;
      materialDefinitionName = %matName;
   };
   
   TamlWrite(%asset, %tamlpath);
	
	%moduleDef = ModuleDatabase.findModule(%moduleName, 1);
	AssetDatabase.addDeclaredAsset(%moduleDef, %tamlpath);
	
	return %tamlpath;    
}
//==============================================================================

//==============================================================================
//Datablock Importing
//==============================================================================
function beginDatablockImport()
{
   error("===========================================");
   error("Importing Datablock files");
   error("===========================================");
   
      foreach( %datablock in DataBlockSet )
   {
      %unlistedFound = false;
      %id = %datablock.getId();
      
      foreach( %obj in UnlistedDatablocks )
         if( %obj.getId() == %id )
         {
            %unlistedFound = true;
            break;
         }
   
      if( %unlistedFound )
         continue;
         
      %dbName = %datablock.getName();
      
      warn("Updating datablock " @ %dbName @ " to use assets instead of legacy fields");
         
      //Process through the datablocks now
      if(%datablock.isInNamespaceHierarchy("ShapeBaseData"))
      {
         %shapeAssetId = updateObjectLegacyField(%datablock, "shapeFile");
         if(%shapeAssetId $= "")
         {
            %shapeAssetId = updateObjectLegacyField(%datablock, "shapeName");
         }
         
         %debrisShapeAssetId = updateObjectLegacyField(%datablock, "debrisShapeName");
         
         if(%datablock.isInNamespaceHierarchy("PlayerData"))
         {
            %shapeAssetId = updateObjectLegacyField(%datablock, "shapeNameFP", 0);
            %shapeAssetId = updateObjectLegacyField(%datablock, "shapeNameFP", 1);
         }
      }
      else if(%datablock.isInNamespaceHierarchy("DebrisData") ||
         %datablock.isInNamespaceHierarchy("PhysicsDebrisData")||
         %datablock.isInNamespaceHierarchy("PhysicsShapeData") || 
         %datablock.isInNamespaceHierarchy("WheeledVehicleTire"))
      {
         %shapeAssetId = updateObjectLegacyField(%datablock, "shapeFile");
         if(%shapeAssetId $= "")
         {
            %shapeAssetId = updateObjectLegacyField(%datablock, "shapeName");
         }
      }
      else if(%datablock.isInNamespaceHierarchy("ExplosionData"))
      {
         %shapeAssetId = updateObjectLegacyField(%datablock, "explosionShape");
      }
      else if(%datablock.isInNamespaceHierarchy("ProjectileData"))
      {
         %shapeAssetId = updateObjectLegacyField(%datablock, "projectileShapeName");
         if(%shapeAssetId $= "")
         {
            %shapeAssetId = updateObjectLegacyField(%datablock, "projectileShapeFile");
         }
      }
      else if(%datablock.isInNamespaceHierarchy("ShapeBaseImageData"))
      {
         %shapeAssetId = updateObjectLegacyField(%datablock, "shapeFile");
         
         %shapeFPAssetId = updateObjectLegacyField(%datablock, "shapeFileFP");
      }
      else if(%datablock.isInNamespaceHierarchy("LightFlareData"))
      {
         %imageAssetId = updateObjectLegacyField(%datablock, "flareTexture");
      }
      else if(%datablock.isInNamespaceHierarchy("DecalData"))
      {
         %materialAssetId = updateObjectLegacyField(%datablock, "material");
      }
   }
   
   $ProjectImporter::persistMgr.saveDirty();

   error("===========================================");
   error("Finished Importing Datablock files");
   error("===========================================");

}
//==============================================================================

//==============================================================================
//Gui Importing
//==============================================================================
function beginGUIImport()
{
   error("===========================================");
   error("Importing GUIs");
   error("===========================================");

   foreach( %gui in GuiGroup )
   {
      %id = %gui.getId();
      
      %guiName = %gui.getName();
      if(%guiName $= "")
         %guiName = %id;
         
      if(%guiName.isInNamespaceHierarchy("GuiCanvas"))
         continue;
      
      %guiFile = %gui.getFilename();
      
      if(%guiFile $= "" || !startsWith(%guiFile, $ProjectImporter::modulePath))
         continue;
      
      if(GUIAsset::getAssetIdByGUIName(%guiName) !$= "")
         continue; //don't re-process if we've already got an asset for it
      
      warn("Updating GUI " @ %guiName @ " to use assets instead of legacy fields");
      
      $ProjectImporter::saveParent = false;
         
      updateGUIControl(%gui);
      
      processGUIChildren(%gui);
      
      if($ProjectImporter::saveParent)
      {
         $ProjectImporter::persistMgr.setDirty(%gui);
      }
      
      processGUIntoAsset(%guiName, %guiFile);
   }
   
   $ProjectImporter::persistMgr.saveDirty();

   error("===========================================");
   error("Finished Importing GUIs");
   error("===========================================");
}

function processGUIChildren(%gui)
{
   foreach( %guiChild in %gui )
   {
      %id = %guiChild.getId();
      
      %guiName = %guiChild.getName();
      if(%guiName $= "")
         %guiName = %id;
         
      //Process through the GUI now
      updateGUIControl(%guiChild);
      
      processGUIChildren(%guiChild);
   }
}

function updateGUIControl(%gui)
{
   //Process through the GUI now
   if(%gui.isInNamespaceHierarchy("guiBitmapCtrl") || 
      %gui.isInNamespaceHierarchy("guiChunkedBitmapCtrl") || 
      %gui.isInNamespaceHierarchy("guiProgressBitmapCtrl") || 
      %gui.isInNamespaceHierarchy("GuiPopUpMenuCtrl") ||
      %gui.isInNamespaceHierarchy("GuiPopUpMenuCtrlEx"))
   {
      %imageAssetId = updateObjectLegacyField(%gui, "bitmap", "", "GUI", false);
      if(%imageAssetId !$= "")
      {
         //successful import
         $ProjectImporter::saveParent = true;
         warn("Successfully processed imageAsset for GUI " @ %guiName);
      }
   }
   else if(%gui.isInNamespaceHierarchy("guiToolboxButtonCtrl"))
   {
      %imageAssetId = updateObjectLegacyField(%gui, "normalBitmap", "", "GUI", false);
      if(%imageAssetId !$= "")
      {
         //successful import
         $ProjectImporter::saveParent = true;
         warn("Successfully processed imageAsset for GUI " @ %guiName);
      }
      %imageAssetId = updateObjectLegacyField(%gui, "loweredBitmap", "", "GUI", false);
      if(%imageAssetId !$= "")
      {
         //successful import
         $ProjectImporter::saveParent = true;
         warn("Successfully processed imageAsset for GUI " @ %guiName);
      }
      %imageAssetId = updateObjectLegacyField(%gui, "hoverBitmap", "", "GUI", false);
      if(%imageAssetId !$= "")
      {
         //successful import
         $ProjectImporter::saveParent = true;
         warn("Successfully processed imageAsset for GUI " @ %guiName);
      }
   }
   else if(%gui.isInNamespaceHierarchy("GuiIconButtonCtrl"))
   {
      %imageAssetId = remapObjectLegacyField(%gui, "iconBitmap", "bitmap", "", "GUI", false);
      if(%imageAssetId !$= "")
      {
         //successful import
         $ProjectImporter::saveParent = true;
         warn("Successfully processed imageAsset for GUI " @ %guiName);
      }
   }
   else if(%gui.isInNamespaceHierarchy("GuiMissionAreaCtrl"))
   {
      %imageAssetId = updateObjectLegacyField(%gui, "handleBitmap", "", "GUI", false);
      if(%imageAssetId !$= "")
      {
         //successful import
         $ProjectImporter::saveParent = true;
         warn("Successfully processed imageAsset for GUI " @ %guiName);
      }
   }
   else if(%gui.isInNamespaceHierarchy("WorldEditor"))
   {
      %imageAssetId = updateObjectLegacyField(%gui, "SelectHandle", "", "GUI", false);
      if(%imageAssetId !$= "")
      {
         //successful import
         $ProjectImporter::saveParent = true;
         warn("Successfully processed imageAsset for GUI " @ %guiName);
      }
      %imageAssetId = updateObjectLegacyField(%gui, "DefaultHandle", "", "GUI", false);
      if(%imageAssetId !$= "")
      {
         //successful import
         $ProjectImporter::saveParent = true;
         warn("Successfully processed imageAsset for GUI " @ %guiName);
      }
      %imageAssetId = updateObjectLegacyField(%gui, "LockedHandle", "", "GUI", false);
      if(%imageAssetId !$= "")
      {
         //successful import
         $ProjectImporter::saveParent = true;
         warn("Successfully processed imageAsset for GUI " @ %guiName);
      }
   }
}

function processGUIntoAsset(%guiName, %file)
{
   warn("Processing GUI into asset: " @ %guiName @ ", file: " @ %file);
   
   %filePath = filePath(%file);
   %moduleName = AssetBrowser.dirHandler.getModuleFromAddress(%file).ModuleId;
   %modulePath = $ProjectImporter::modulePath @ "/" @ %moduleName;
      
   %assetName = %guiName;
   
   %assetPath = %filePath @ "/";
   
   %tamlpath = %assetPath @ %assetName @ ".asset.taml";
   
   %asset = new GUIAsset()
   {
      AssetName = %assetName;
      versionId = 1;
      scriptFile = %assetName @ "." @ $TorqueScriptFileExtension;
      guiFile = %assetName @ ".gui";
   };
   
   TamlWrite(%asset, %tamlpath);
	
	%moduleDef = ModuleDatabase.findModule(%moduleName, 1);
	AssetDatabase.addDeclaredAsset(%moduleDef, %tamlpath);
	
	return %tamlpath;    
}
//==============================================================================

//==============================================================================
//Misc Object Type Converion
//==============================================================================
function beginMiscObjectImport()
{
   error("===========================================");
   error("Importing Misc Object Types");
   error("===========================================");
   
   foreach( %obj in GuiDataGroup )
   {
      %id = %obj.getId();
      
      %objName = %obj.getName();
      if(%objName $= "")
         %objName = %id;
      
      %objFile = %obj.getFilename();
      
      if(%objFile $= "" || !startsWith(%objFile, $ProjectImporter::modulePath))
         continue;
         
      %changed = false;
      
      if(%obj.isInNamespaceHierarchy("guiControlProfile"))
      {
         %imageAssetId = updateObjectLegacyField(%obj, "bitmap");
         if(%imageAssetId !$= "")
         {
            warn("Successfully processed imageAsset for object: " @ %objName);
            %changed = true;
         }
      }
      
      if(%changed)
         $ProjectImporter::persistMgr.setDirty(%obj);
   }

   foreach( %obj in RootGroup )
   {
      %id = %obj.getId();
      
      %objName = %obj.getName();
      if(%objName $= "")
         %objName = %id;
      
      %objFile = %obj.getFilename();
      
      if(%objFile $= "" || !startsWith(%objFile, $ProjectImporter::modulePath))
         continue;
         
      %changed = false;
      
      if(%obj.isInNamespaceHierarchy("guiCursor"))
      {
         %imageAssetId = remapObjectLegacyField(%obj, "bitmapName", "bitmap");
         if(%imageAssetId !$= "")
         {
            warn("Successfully processed imageAsset for object: " @ %objName);
            %changed = true;
         }
      }
      
      if(%changed)
         $ProjectImporter::persistMgr.setDirty(%obj);
   }
   
   $ProjectImporter::persistMgr.saveDirty();
   
   error("===========================================");
   error("Finished Importing Misc Object Types");
   error("===========================================");
}
//==============================================================================

//==============================================================================
//Level Importing
//==============================================================================

//==============================================================================

//==============================================================================
//Misc Script file conversion
//==============================================================================

//==============================================================================

//==============================================================================
//PostFX conversion
//==============================================================================
function beginPostFXImport()
{
   error("===========================================");
   error("Importing PostFXs");
   error("===========================================");
   
   %count = PostFXManager.Count();
   for(%i=0; %i < %count; %i++)
   {
      %postEffect = PostFXManager.getKey(%i);  
      
      if(isObject(%postEffect))
      {     
         echo("Processing import of PostFX: " @ %postEffect.getName());
         
         //$ProjectImporter::persistMgr.setDirty(%gui);
      }
   }
   
   //$ProjectImporter::persistMgr.saveDirty();

   error("===========================================");
   error("Finished Importing PostFXs");
   error("===========================================");
}
//==============================================================================